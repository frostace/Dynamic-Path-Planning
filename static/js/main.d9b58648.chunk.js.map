{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","serviceWorker.js","index.js"],"names":["Square","props","isWall","className","onMouseOver","onClick","Board","console","log","board_rows","this","allRows","map","oneRowOfSquares","i","key","onMouseDown","onMouseUp","React","Component","Game","squareIndices","Array","fill","j","state","mouseIsDown","squareList","boardSquareIsWall","boardRowNum","stepNumber","xIsNext","handleMouseFlip","bind","handleMouseUpAndDown","tmpSquares","slice","setState","e","prevState","rows","oneRowOfIndices","rowIdx","_","colIdx","overallIdx","handleMouseClick","squares","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gUAoBeA,MAjBf,SAAgBC,GACf,IAAMC,EAASD,EAAMC,OAAS,cAAgB,GAC9C,OACC,4BAOCC,UAAS,iBAAYD,GACrBE,YAAaH,EAAMG,YACnBC,QAASJ,EAAMI,WCqCHC,E,sLA9BbC,QAAQC,IAAI,Q,sCAIZD,QAAQC,IAAI,U,+BAKZ,IAAIC,EAAaC,KAAKT,MAAMU,QAAQC,KAAI,SAACC,EAAiBC,GACzD,OACC,yBAAKC,IAAKD,EAAGX,UAAU,aACrBU,MAOJ,OACC,yBACCG,YAAaN,KAAKT,MAAMe,YACxBC,UAAWP,KAAKT,MAAMgB,WAErBR,O,GA3CeS,IAAMC,W,YC0IXC,M,YAlId,WAAYnB,GAAQ,IAAD,sBAClB,4CAAMA,IAEN,IADA,IAAIoB,EAAgBC,MALF,IAKqBC,KAAKD,MAL1B,IAK6CC,KAAK,IAC3DT,EAAI,EAAGA,EANE,GAMeA,IAChC,IAAK,IAAIU,EAAI,EAAGA,EAPC,GAOgBA,IAChCH,EAAcP,GAAGU,GARD,GAQMV,EAAkBU,EALxB,OAQlB,EAAKC,MAAQ,CACZC,aAAa,EACbC,WAAYN,EACZO,kBAAmBN,MAAMO,MAA2BN,MAAK,GACzDO,WAAY,EACZC,SAAS,GAEV,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAhBV,E,6EAmBHnB,GACf,GAAKJ,KAAKe,MAAMC,YAAhB,CACA,IAAMS,EAAazB,KAAKe,MAAMG,kBAAkBQ,QAEhDD,EAAWrB,IAAMqB,EAAWrB,GAK5BJ,KAAK2B,SAAS,CACbT,kBAAmBO,EAInBJ,SAAUrB,KAAKe,MAAMM,a,uCAINjB,GAChB,IAAMqB,EAAazB,KAAKe,MAAMG,kBAAkBQ,QAEhDD,EAAWrB,IAAMqB,EAAWrB,GAK5BJ,KAAK2B,SAAS,CACbT,kBAAmBO,EAInBJ,SAAUrB,KAAKe,MAAMM,Y,2CAIFO,GACpB5B,KAAK2B,UAAS,SAAAE,GACb,MAAO,CAAEb,aAAca,EAAUb,kB,+BAIzB,IAAD,OACJc,EAAO9B,KAAKe,MAAME,WAAWf,KAAI,SAAC6B,EAAiBC,GACtD,OAAOD,EAAgB7B,KAAI,SAAC+B,EAAGC,GAC9B,IAAIC,EAlEY,GAkECH,EAAuBE,EACxC,OACC,kBAAC,EAAD,CACC7B,IAAK8B,EACL3C,OAAQ,EAAKuB,MAAMG,kBAAkBiB,GAErCzC,YAAa,kBAAM,EAAK4B,gBAAgBa,IACxCxC,QAAS,kBAAM,EAAKyC,iBAAiBD,YAMzC,OACC,yBACC1C,UAAU,QAGV,yBAAKA,UAAU,cACd,kBAAC,EAAD,CACCA,UAAU,QACV4C,QAASrC,KAAKe,MAAMG,kBAEpBZ,YAAaN,KAAKwB,qBAClBjB,UAAWP,KAAKwB,qBAChBvB,QAAS6B,IACP,KACG,IACP,yBAAKrC,UAAU,aACb,IAC8C,IACR,KACjC,S,GAhGQe,IAAMC,WCEL6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.d9b58648.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./assets/square.css\";\n\nfunction Square(props) {\n\tconst isWall = props.isWall ? \"square-wall\" : \"\";\n\treturn (\n\t\t<button\n\t\t\t// id={`square-${row}-${col}`}\n\t\t\t// className={`square ${extraClassName}`}\n\t\t\t// onMouseDown={() => onMouseDown(row, col)}\n\t\t\t// onMouseEnter={() => onMouseEnter(row, col)}\n\t\t\t// onMouseUp={() => onMouseUp()}\n\t\t\t// style={{ background: props.color }}\n\t\t\tclassName={`square ${isWall}`}\n\t\t\tonMouseOver={props.onMouseOver}\n\t\t\tonClick={props.onClick}\n\t\t></button>\n\t);\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square.jsx\";\n\nclass Board extends React.Component {\n\t// constructor(props){\n\t//     super(props);\n\t//     this.state = {\n\t//         squares: Array(9).fill(null),\n\t//         xIsNext: true,\n\t//     };\n\t// }\n\n\t// renderSquare(i) {\n\t//     return (\n\t//         <Square\n\t//             color={this.props.squares[i]}\n\t//             onClick={() => this.props.onClick(i)}\n\t//         />\n\t//     );\n\t// }\n\n\ttestMouseUp() {\n\t\tconsole.log(\"up\");\n\t}\n\n\ttestMouseDown() {\n\t\tconsole.log(\"down\");\n\t}\n\n\trender() {\n\t\t// console.log(this.props.allRows);\n\t\tvar board_rows = this.props.allRows.map((oneRowOfSquares, i) => {\n\t\t\treturn (\n\t\t\t\t<div key={i} className=\"board-row\">\n\t\t\t\t\t{oneRowOfSquares}\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\n\t\t// console.log(board_rows);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tonMouseDown={this.props.onMouseDown}\n\t\t\t\tonMouseUp={this.props.onMouseUp}\n\t\t\t>\n\t\t\t\t{board_rows}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board.jsx\";\nimport Square from \"./Square.jsx\";\nimport \"./assets/board.css\";\nimport update from \"react-addons-update\";\n\nconst originColor = \"white\";\nconst flippedColor = \"#0C3547\";\nconst boardRowNum = 49;\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar squareIndices = Array(boardRowNum).fill(Array(boardRowNum).fill(0));\n\t\tfor (let i = 0; i < boardRowNum; i++) {\n\t\t\tfor (let j = 0; j < boardRowNum; j++) {\n\t\t\t\tsquareIndices[i][j] = i * boardRowNum + j;\n\t\t\t}\n\t\t}\n\t\tthis.state = {\n\t\t\tmouseIsDown: false,\n\t\t\tsquareList: squareIndices,\n\t\t\tboardSquareIsWall: Array(boardRowNum * boardRowNum).fill(false),\n\t\t\tstepNumber: 0,\n\t\t\txIsNext: true\n\t\t};\n\t\tthis.handleMouseFlip = this.handleMouseFlip.bind(this);\n\t\tthis.handleMouseUpAndDown = this.handleMouseUpAndDown.bind(this);\n\t}\n\n\thandleMouseFlip(i) {\n\t\tif (!this.state.mouseIsDown) return;\n\t\tconst tmpSquares = this.state.boardSquareIsWall.slice();\n\n\t\ttmpSquares[i] = !tmpSquares[i];\n\t\t// tmpSquares[i] === originColor || tmpSquares[i] === null\n\t\t// \t? flippedColor\n\t\t// \t: originColor;\n\n\t\tthis.setState({\n\t\t\tboardSquareIsWall: tmpSquares,\n\t\t\t// boardSquareIsWall: update(this.state.boardSquareIsWall, {\n\t\t\t// \ti: { $set: tmpSquares[i] }\n\t\t\t// }),\n\t\t\txIsNext: !this.state.xIsNext\n\t\t});\n\t}\n\n\thandleMouseClick(i) {\n\t\tconst tmpSquares = this.state.boardSquareIsWall.slice();\n\n\t\ttmpSquares[i] = !tmpSquares[i];\n\t\t// tmpSquares[i] === originColor || tmpSquares[i] === null\n\t\t// \t? flippedColor\n\t\t// \t: originColor;\n\n\t\tthis.setState({\n\t\t\tboardSquareIsWall: tmpSquares,\n\t\t\t// boardSquareIsWall: update(this.state.boardSquareIsWall, {\n\t\t\t// \ti: { $set: tmpSquares[i] }\n\t\t\t// }),\n\t\t\txIsNext: !this.state.xIsNext\n\t\t});\n\t}\n\n\thandleMouseUpAndDown(e) {\n\t\tthis.setState(prevState => {\n\t\t\treturn { mouseIsDown: !prevState.mouseIsDown };\n\t\t});\n\t}\n\n\trender() {\n\t\tvar rows = this.state.squareList.map((oneRowOfIndices, rowIdx) => {\n\t\t\treturn oneRowOfIndices.map((_, colIdx) => {\n\t\t\t\tlet overallIdx = rowIdx * boardRowNum + colIdx;\n\t\t\t\treturn (\n\t\t\t\t\t<Square\n\t\t\t\t\t\tkey={overallIdx}\n\t\t\t\t\t\tisWall={this.state.boardSquareIsWall[overallIdx]}\n\t\t\t\t\t\t// color={this.state.boardSquareIsWall[overallIdx]}\n\t\t\t\t\t\tonMouseOver={() => this.handleMouseFlip(overallIdx)}\n\t\t\t\t\t\tonClick={() => this.handleMouseClick(overallIdx)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"game\"\n\t\t\t\t// onMouseUp={() => this.handleMouseUpAndDown}\n\t\t\t>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\tclassName=\"board\"\n\t\t\t\t\t\tsquares={this.state.boardSquareIsWall}\n\t\t\t\t\t\t// onClick={i => this.handleClick(i)}\n\t\t\t\t\t\tonMouseDown={this.handleMouseUpAndDown}\n\t\t\t\t\t\tonMouseUp={this.handleMouseUpAndDown}\n\t\t\t\t\t\tallRows={rows}\n\t\t\t\t\t/>{\" \"}\n\t\t\t\t</div>{\" \"}\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t{\" \"}\n\t\t\t\t\t{/* <div className=\"status\">{status}</div> */}{\" \"}\n\t\t\t\t\t{/* <ol class=\"moves\">{moves}</ol> */}{\" \"}\n\t\t\t\t</div>{\" \"}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction calculateWinner(squares) {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6]\n\t];\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i];\n\t\tif (\n\t\t\tsquares[a] &&\n\t\t\tsquares[a] === squares[b] &&\n\t\t\tsquares[b] === squares[c]\n\t\t) {\n\t\t\treturn squares[a];\n\t\t}\n\t}\n\tfor (let i = 0; i < 9; i++) {\n\t\tif (squares[i] === null) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn \"Tie\";\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/index.css\";\nimport Game from \"./Game.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}